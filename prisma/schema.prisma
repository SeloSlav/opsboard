generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String?
  image       String?
  createdAt   DateTime     @default(now())
  memberships Membership[]
  comments    Comment[]
  auditLogs   AuditLog[]   @relation("AuditActor")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  memberships Membership[]
  projects    Project[]
  auditLogs   AuditLog[]
}

model Membership {
  id             String       @id @default(cuid())
  role           Role
  userId         String
  organizationId String
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  VIEWER
}

model Project {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  description    String?
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  tickets        Ticket[]
}

model Ticket {
  id          String    @id @default(cuid())
  projectId   String
  title       String
  description String?
  status      Status    @default(BACKLOG)
  priority    Priority  @default(MEDIUM)
  dueAt       DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id])
  comments    Comment[]
}

enum Status {
  BACKLOG
  IN_PROGRESS
  BLOCKED
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Comment {
  id        String   @id @default(cuid())
  ticketId  String
  authorId  String
  body      String
  createdAt DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
}

model AuditLog {
  id             String       @id @default(cuid())
  organizationId String
  actorId        String?
  kind           String
  payload        Json
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  actor          User?        @relation("AuditActor", fields: [actorId], references: [id])
}
